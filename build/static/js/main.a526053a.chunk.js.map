{"version":3,"sources":["helper/request.ts","stores/user/api.ts","stores/user/store.ts","stores/index.ts","stores/user/state.ts","pages/NoMatch/index.tsx","router/index.tsx","components/Loading/index.tsx","helper/recycle.ts","App.tsx","index.tsx"],"names":["service","axios","create","baseURL","process","withCredentials","timeout","interceptors","request","use","config","error","Promise","reject","response","UserApi","getUserApi","data","url","method","initialUserState","loading","device","userInfo","issueId","custId","name","gender","webAppKey","custName","authKcpYn","birthday","storeNm","pass","surveyGrpCd","initialState","Object","assign","fetchNotiUser","createAsyncThunk","thunkAPI","a","rejectWithValue","userStore","createSlice","reducers","setDevice","state","action","payload","extraReducers","pending","type","fulfilled","window","sessionStorage","setItem","JSON","stringify","rejected","actions","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","logger","devTools","UserState","createSelector","NoMatch","status","title","subTitle","router","render","location","TransitionGroup","CSSTransition","mountOnEnter","unmountOnExit","classNames","exact","path","to","component","NoMatchPage","pathname","split","Loading","className","Recycle","getDevice","navigator","userAgent","indexOf","App","dispatch","useDispatch","useSelector","useEffect","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a526053a.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst service = axios.create({\n  baseURL: process.env.REACT_APP_BASE_API,\n  withCredentials: true,\n  timeout: 10000\n});\n\nservice.interceptors.request.use(\n  config => {\n    return config;\n  },\n  error => {\n    Promise.reject(error);\n    return { error };\n  }\n);\n\nservice.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    Promise.reject(error);\n    return { error };\n  }\n);\n\nexport default service;\n","import request from 'helper/request';\nimport { AxiosResponse } from 'axios';\n\nconst UserApi = {\n  getUserApi: (data: { webAppKey: string }): Promise<AxiosResponse> =>\n    request({\n      url: '/v-noti-user',\n      method: 'post',\n      data\n    })\n};\n\nexport default UserApi;\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport UserApi from './api';\n\ntype userStateType = {\n  loading: boolean;\n  device: string;\n  userInfo: {\n    issueId: string;\n    custId: string;\n    name: string;\n    gender: string;\n    webAppKey: string;\n    custName: string;\n    authKcpYn: string;\n    birthday: string;\n    storeNm: string;\n    pass: boolean;\n    surveyGrpCd: string;\n  };\n};\n\nconst initialUserState: userStateType = {\n  loading: false,\n  device: '',\n  userInfo: {\n    issueId: '',\n    custId: '',\n    name: '',\n    gender: '',\n    webAppKey: '',\n    custName: '',\n    authKcpYn: '',\n    birthday: '',\n    storeNm: '',\n    pass: false,\n    surveyGrpCd: ''\n  }\n};\n\n// Slice Info\nconst name = 'user';\nconst initialState = Object.assign(initialUserState);\n\n// async Thunk Api\nexport const fetchNotiUser = createAsyncThunk(\n  `${name}/fetchUser`,\n  async ({ webAppKey }: { webAppKey: string }, thunkAPI) => {\n    const { data = '' } = await UserApi.getUserApi({ webAppKey });\n    if (data !== '') {\n      return data;\n    }\n    return thunkAPI.rejectWithValue('error');\n  }\n);\n\n// Slice\nexport const userStore = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDevice: (state, action: PayloadAction<{ device: string }>) => {\n      state.device = action.payload.device;\n    }\n  },\n  extraReducers: {\n    [fetchNotiUser.pending.type]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchNotiUser.fulfilled.type]: (state, action) => {\n      state.userInfo = action.payload.data;\n      window.sessionStorage.setItem('userInfo', JSON.stringify(state.userInfo));\n      state.loading = false;\n    },\n    [fetchNotiUser.rejected.type]: (state, action) => {\n      state.userInfo = Object.assign(initialUserState.userInfo);\n      state.loading = false;\n    }\n  }\n});\nexport const { setDevice } = userStore.actions;\n\nexport default userStore.reducer;\n","import logger from 'redux-logger';\nimport { configureStore, ThunkAction, Action, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport userStore from './user/store';\n\nexport const store = configureStore({\n  reducer: {\n    userStore\n  },\n  middleware: getDefaultMiddleware().concat(logger),\n  devTools: process.env.NODE_ENV !== 'production'\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\n\nconst userInfo = (state: RootState) => state.userStore.userInfo;\nconst loading = (state: RootState) => state.userStore.loading;\n\nconst UserState = {\n  userInfo: createSelector(userInfo, state => {\n    return state;\n  }),\n  loading: createSelector(loading, state => {\n    return state;\n  })\n};\n\nexport default UserState;\n","import React from 'react';\nimport { Result, Button } from 'antd';\n\nconst NoMatch: React.FunctionComponent = () => {\n  return (\n    <div>\n      <Result status=\"404\" title=\"404\" subTitle=\"Sorry, the page you visited does not exist.\" />\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import React from 'react';\n\nimport { HashRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nimport NoMatchPage from 'pages/NoMatch';\n\nconst router: React.FunctionComponent = () => {\n  return (\n    <Router>\n      <Route\n        render={({ location }) => {\n          return (\n            <TransitionGroup>\n              <CSSTransition\n                key={location.pathname.split('/')[1]}\n                timeout={300}\n                mountOnEnter\n                unmountOnExit\n                classNames=\"fade\">\n                <Switch location={location}>\n                  <Route exact path=\"/\" render={() => <Redirect to=\"/splash\" />} />\n                  <Route path=\"*\" component={NoMatchPage} />\n                </Switch>\n              </CSSTransition>\n            </TransitionGroup>\n          );\n        }}\n      />\n    </Router>\n  );\n};\n\nexport default router;\n","import React from 'react';\n\nconst Loading: React.FunctionComponent = () => {\n  return (\n    <div className=\"loading-wrap\">\n      <div className=\"container animation-2\">\n        <div className=\"shape shape1\" />\n        <div className=\"shape shape2\" />\n        <div className=\"shape shape3\" />\n        <div className=\"shape shape4\" />\n      </div>\n      <div className=\"text\">확인중...</div>\n    </div>\n  );\n};\n\nexport default Loading;\n","const Recycle = {\n  getDevice: (): string => {\n    let resultDevice = '';\n    if (window.navigator.userAgent.indexOf('Android') !== -1) {\n      resultDevice = 'Android';\n    } else if (window.navigator.userAgent.indexOf('iPhone') !== -1) {\n      resultDevice = 'iPhone';\n    } else {\n      resultDevice = 'PC';\n    }\n\n    return resultDevice;\n  }\n};\n\nexport default Recycle;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchNotiUser, setDevice } from 'stores/user/store';\nimport UserState from 'stores/user/state';\nimport Routers from 'router';\nimport Loading from 'components/Loading';\nimport Recycle from 'helper/recycle';\n\nconst App: React.FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const webAppKey = '40tGJcgZ1u1uZ4gCdqoZj76i3HFHIZdszMiOPSifx5htOn+Wwf24VqhOu2myNpCs-71793';\n  const loading = useSelector(UserState.loading);\n  useEffect(() => {\n    dispatch(fetchNotiUser({ webAppKey }));\n    dispatch(setDevice({ device: Recycle.getDevice() }));\n  }, [dispatch]);\n  return (\n    <div>\n      <Routers />\n      {loading ? <Loading /> : ''}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from 'stores';\nimport App from './App';\nimport 'styles/index.scss';\nimport 'antd/dist/antd.css';\nimport 'react-circular-progressbar/dist/styles.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}